// packages/backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Battle {
  id                    String   @id @default(uuid()) @db.Uuid
  status                String   @default("waiting")
  admin_user_id         String?  @db.Uuid
  started_at            DateTime? @db.Timestamptz(6)
  completed_at          DateTime? @db.Timestamptz(6)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @updatedAt @db.Timestamptz(6)
  scheduled_start_time  DateTime? @db.Timestamptz(6)
  duration_minutes      Int?
  auto_end_time         DateTime? @db.Timestamptz(6)
  participants          Json?    @default("[]")
  results               Json?    @default("[]")
  ended_by              String?
  selected_question_id  Int?

  // Relations
  participations        BattleParticipation[]
  questionPools         BattleQuestionPool[]
  selectedQuestion      Question? @relation("SelectedQuestion", fields: [selected_question_id], references: [id])

  @@map("battles")
}

model BattleParticipation {
  id            String   @id @default(uuid()) @db.Uuid
  battle_id     String   @db.Uuid
  user_id       String   @db.Uuid
  tests_passed  Int      @default(0)
  total_tests   Int      @default(0)
  completion_time Int?
  placement     Int?
  joined_at     DateTime @default(now()) @db.Timestamptz(6)
  is_connected  Boolean  @default(true)

  // Relations
  battle        Battle   @relation(fields: [battle_id], references: [id], onDelete: Cascade)

  @@unique([battle_id, user_id])
  @@map("battle_participations")
}

model Question {
  id                Int      @id @default(autoincrement())
  title             String
  slug              String   @unique
  difficulty        String
  problem_statement String   @db.Text
  function_signature String? @db.Text
  test_cases        Json     @default("[]")
  examples          Json?
  constraints       String?
  hints             Json?
  tags              Json?
  leetcode_number   Int?     @unique
  starter_code      String?  @db.Text
  solution          String?  @db.Text
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  battlePools       BattleQuestionPool[]
  selectedForBattles Battle[] @relation("SelectedQuestion")

  @@map("questions")
}

model BattleQuestionPool {
  id         Int @id @default(autoincrement())
  battle_id  String @db.Uuid
  question_id Int
  is_current Boolean @default(false)

  // Relations
  battle     Battle @relation(fields: [battle_id], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([battle_id, question_id])
  @@map("battle_question_pools")
}

// Views (if you want to include them)
// view BattleStats {
//   battle_id     String @db.Uuid
//   total_players Int?
//   avg_tests_passed Float?
//   max_tests_passed Int?

//   @@map("battle_stats")
// }