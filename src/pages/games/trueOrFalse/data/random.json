[
  {
    "id": "1",
    "title": "Deck 1",
    "questions": [
      {
        "question": "1.1 > 2",
        "explanation": "Basic math question to warm up."
      },
      {
        "question": "true > false",
        "explanation": "When comparing booleans, JavaScript turns both booleans to numbers. True coerced to a number is 1. False coerced to a number is 0. The comparison after type coercion is 1 > 0. Which is true."
      },
      {
        "question": "'dog' > 'cat'",
        "explanation": "When comparing strings, JavaScript compares their Unicode values letter by letter. For the most part, letters later in the alphabet are considered greater than letters early in the alphabet. In this question 'd' is larger than 'c'. Therefore it is true."
      },
      {
        "question": "'1' == 1",
        "explanation": "When comparing strings to numbers, JavaScript attempts to turn strings to numbers. The string '1' is coerced to the number 1. The comparison after coercion the is 1 == 1. Therefore it is true."
      },
      {
        "question": "'true' == true",
        "explanation": "The second true is converted to the number 1. JavaScript then tries to convert the string 'true' to a number, resulting in NaN. After coercion the comparison is NaN == 1. Therefore it is false."
      }
    ]
  },
  {
    "id": "2",
    "title": "Deck 2",
    "questions": [
      {
        "question": "[] > {}",
        "explanation": "When comparing different types like an array and an object, the abstract relational comparison algorithm is applied. This converts the operands to primitives and then compares them. An empty array ([]) gets coerced to the empty string (''), while an empty object ({}) gets coerced to '[object Object]'. Comparing these strings, '' > '[object Object]', which evaluates to false. If all else is equal, the shorter string is considered less than the longer string."
      },
      {
        "question": "1 > '1'",
        "explanation": "When comparing a number to a string, JavaScript attempts to turn strings to numbers. In this case, '1' gets converted to a number, and the comparison becomes 1 > 1, which is false."
      },
      {
        "question": "'true' > true",
        "explanation": "JavaScript attempts to coerce the string 'true' to a number, resulting in NaN (not a number), while the boolean true gets converted to 1. After coercion the comparison is NaN > 1, which is false."
      },
      {
        "question": "1.0 > 1.00",
        "explanation": "When comparing numbers, the number of trailing zeros doesn't matter. Both 1.0 and 1.00 are the same numeric value, so the comparison evaluates to false."
      },
      {
        "question": "'a' > 0",
        "explanation": "When comparing a string and a number, JavaScript attempts to turn strings to numbers. The string 'a' gets converted to NaN. After coercion the comparison is NaN > 0, which is false."
      }
    ]
  },
  {
    "id": "3",
    "title": "Deck 3",
    "questions": [
      {
        "question": "(100 / '10') === 10",
        "explanation": "When dividing a number by a string, JavaScript performs type coercion. The string '10' is converted to a number, resulting in 100 / 10 which is 10. The strict comparison checks both value and type, and in this case, 10 (a number) is strictly equal to 10. Thus, the expression evaluates to true."
      },
      {
        "question": "10 + '10' === 1010",
        "explanation": "When using the + operator with a number and a string, JavaScript performs string concatenation. In this case, '10' is concatenated to 10, resulting in '1010'. The strict equality operator checks both value and type, and since '1010' is not strictly equal to 1010, the expression evaluates to false."
      },
      {
        "question": "10 - '10' === 1010",
        "explanation": "The subtraction operator (-) in JavaScript coerces the string '10' into a number, and the expression becomes 10 - 10, which equals 0. However, 0 is not equal to 1010, so the expression evaluates to false."
      },
      {
        "question": "true + 10 === 11",
        "explanation": "In JavaScript, when a boolean value (true) is used with the + operator, it's converted to a number (1). Thus, the expression becomes 1 + 10, which equals 11."
      },
      {
        "question": "0.1 + 0.2 === 0.3",
        "explanation": "Floating-point arithmetic in JavaScript can sometimes lead to unexpected results due to how floating-point numbers are represented. In this case, 0.1 + 0.2 results in 0.30000000000000004, not 0.3. Hence, the expression evaluates to false."
      }
    ]
  },
  {
    "id": "4",
    "title": "Deck 4",
    "questions": [
      {
        "question": "typeof NaN === 'number'",
        "explanation": "The typeof operator in JavaScript returns 'number' for NaN (Not a Number). Although NaN represents an invalid number, it is still considered a numeric data type."
      },
      {
        "question": "null == undefined",
        "explanation": "In JavaScript, null and undefined are loosely equal (==) but not strictly equal (===). So, null == undefined is true, but null === undefined is false."
      },
      {
        "question": "NaN === NaN",
        "explanation": "In JavaScript, NaN (Not a Number) is considered to be unequal to every value, including itself. So NaN === NaN evaluates to false."
      },
      {
        "question": "Infinity > 1000",
        "explanation": "In JavaScript, Infinity represents a value greater than any other number. So, Infinity > 1000 evaluates to true."
      },
      {
        "question": "Boolean('false') === false",
        "explanation": "The expression Boolean('false') evaluates to true because any non-empty string, including 'false', evaluates to true in a Boolean context. However, when compared strictly, Boolean('false') === false evaluates to false because the string 'false' is coerced into true by the Boolean constructor, but false is false."
      }
    ]
  },
  {
    "id": "5",
    "title": "Deck 5",
    "questions": [
      {
        "question": "({}).toString() == '[object Object]'",
        "explanation": "In JavaScript, when an object is converted to a string, its default string representation is '[object Object]'. So, `({}).toString() == '[object Object]'` evaluates to true."
      },
      {
        "question": "[].toString() === ''",
        "explanation": "The `toString()` method of an empty array returns an empty string. The strict equality operator `===` checks both value and type, so `[].toString() === ''` evaluates to true."
      },
      {
        "question": "let dog = {}; \nlet cat = dog; \ndog === cat",
        "explanation": "In JavaScript, objects are reference types. When `cat` is assigned the value of `dog`, they refer to the same object. Hence, `dog === cat` evaluates to true."
      },
      {
        "question": "false + 10 === 9",
        "explanation": "In JavaScript, `false` is coerced to the number 0 when used with the `+` operator. So, `false + 10` equals 10. Since 10 is not equal to 9, `false + 10 === 9` evaluates to false."
      },
      {
        "question": "undefined == 0",
        "explanation": "In JavaScript, when comparing `undefined` with a number using loose equality (`==`), `undefined` is coerced to `NaN` (Not a Number), and `NaN` is not equal to 0. Therefore, `undefined == 0` evaluates to false."
      }
    ]
  },
  {
    "id": "6",
    "title": "Deck 6",
    "questions": [
      {
        "question": "({} + [] === 0)",
        "explanation": "The expression '{}' + [] results in the string '[object Object]' concatenated with an empty array, which becomes the string '[object Object]'. When compared with the number 0, it evaluates to false."
      },
      {
        "question": "Math.min() > Math.max()",
        "explanation": "Math.min() returns Infinity, and Math.max() returns -Infinity. Hence, Math.min() > Math.max() evaluates to false."
      },
      {
        "question": "({} === [])",
        "explanation": "An object and an array are different types and have different memory references, so '{}' === [] evaluates to false."
      },
      {
        "question": "null >= 0",
        "explanation": "In JavaScript, null is not greater than or equal to 0, so null >= 0 evaluates to false."
      },
      {
        "question": "NaN === NaN",
        "explanation": "NaN is a special value in JavaScript that represents 'Not a Number'. It is not equal to itself, so NaN === NaN evaluates to false."
      }
    ]
  },
  {
    "id": "7",
    "title": "Deck 7",
    "questions": [
      {
        "question": "'a' > 'b'",
        "explanation": "In JavaScript, string comparison is done based on Unicode values. Since 'b' comes after 'a' in the Unicode table, 'a' > 'b' evaluates to false."
      },
      {
        "question": "2 + 2 + '2' == 42",
        "explanation": "The expression is evaluated left-to-right. First, 2 + 2 results in 4. Then, 4 is concatenated with the string '2', resulting in '42'. Since '42' is not equal to 42, the expression evaluates to false."
      },
      {
        "question": "'2' + 2 + 2 == 24",
        "explanation": "The expression is evaluated left-to-right. First, '2' is concatenated with 2, resulting in '22'. Then, '22' is concatenated with 2, resulting in '222'. Since '222' is not equal to 24, the expression evaluates to false."
      },
      {
        "question": "2 > 'a'",
        "explanation": "In JavaScript, when comparing a number to a string, the string is converted to a number. Since 'a' cannot be converted to a number, the comparison evaluates to false."
      },
      {
        "question": "2 > '1'",
        "explanation": "In JavaScript, when comparing a number to a string, both operands are converted to numbers. '2' is converted to 2, and '1' is converted to 1. Therefore, 2 > 1 evaluates to true."
      }
    ]
  },
  {
    "id": "8",
    "title": "Deck 8",
    "questions": [
      {
        "question": "+true == 1",
        "explanation": "The unary plus operator converts true to 1. Hence, +true == 1 evaluates to true."
      },
      {
        "question": "+[] == 0",
        "explanation": "The unary plus operator converts an empty array to 0. Hence, +[] == 0 evaluates to true."
      },
      {
        "question": "+'123' == 123",
        "explanation": "The unary plus operator converts the string '123' to the number 123. Hence, +'123' == 123 evaluates to true."
      },
      {
        "question": "+{} == 0",
        "explanation": "The unary plus operator cannot directly convert an object to a number. Hence, +{} == 0 evaluates to false."
      },
      {
        "question": "+['1', '2'] == [1, 2]",
        "explanation": "The unary plus operator converts the array to a string, which results in '1,2'. Since '1,2' is not equal to [1, 2], +['1', '2'] == [1, 2] evaluates to false."
      }
    ]
  },
  {
    "id": "9",
    "title": "Deck 9",
    "questions": [
      {
        "question": "typeof null == 'null'",
        "explanation": "typeof null returns 'object' in JavaScript because null is considered an empty object reference."
      },
      {
        "question": "typeof null == 'undefined'",
        "explanation": "typeof null does not return 'undefined'. Therefore, typeof null == 'undefined' evaluates to false."
      },
      {
        "question": "typeof null == 'object'",
        "explanation": "typeof null returns 'object' in JavaScript, not 'null'. Therefore, typeof null == 'object' evaluates to true."
      },
      {
        "question": "typeof undefined == 'undefined'",
        "explanation": "typeof undefined returns 'undefined' in JavaScript. Hence, typeof undefined == 'undefined' evaluates to true."
      },
      {
        "question": "typeof typeof 1 == 'string'",
        "explanation": "typeof typeof 1 returns 'string' because typeof returns a string indicating the type of the unevaluated operand. Therefore, typeof typeof 1 == 'string' evaluates to true."
      }
    ]
  },
  {
    "id": "10",
    "title": "Deck 10",
    "questions": [
      {
        "question": "typeof Boolean() == 'boolean'",
        "explanation": "typeof Boolean() returns 'boolean' because the Boolean function returns a boolean value."
      },
      {
        "question": "Boolean(' ') == true",
        "explanation": "Boolean(' ') evaluates to true because any non-empty string is considered truthy in JavaScript."
      },
      {
        "question": "Boolean(NaN.toString()) == true",
        "explanation": "NaN.toString() returns the string 'NaN'. Since 'NaN' is a non-empty string, Boolean(NaN.toString()) evaluates to true."
      },
      {
        "question": "Boolean('undefined') == false",
        "explanation": "The string 'undefined' is not an empty string, so Boolean('undefined') evaluates to true."
      },
      {
        "question": "Boolean([] = ['a'])",
        "explanation": "The expression [] = ['a'] is an assignment expression, not a comparison. It assigns the array ['a'] to the empty array [], and the result of the assignment (the value of the left-hand side) is ['a']. When converted to a boolean, it evaluates to true."
      }
    ]
  },
  {
    "id": "11",
    "title": "Deck 11",
    "questions": [
      {
        "question": "true == false + 1",
        "explanation": "In JavaScript, true is coerced to 1 and false is coerced to 0 in numerical contexts. So, true == false + 1 evaluates to true."
      },
      {
        "question": "true == 1",
        "explanation": "Similarly, true is coerced to 1 in a numerical context. So, true == 1 evaluates to true."
      },
      {
        "question": "0 == ''",
        "explanation": "In JavaScript, 0 is loosely equal to an empty string (''). So, 0 == '' evaluates to true."
      },
      {
        "question": "Number('     ') == 0",
        "explanation": "Number('     ') returns 0 after parsing because leading and trailing spaces are ignored. So, Number('     ') == 0 evaluates to true."
      },
      {
        "question": "'1' + 1 + 1 + 1 == 13",
        "explanation": "'1' + 1 + 1 + 1 results in '1111' as it performs string concatenation. Hence, '1111' == 13 evaluates to false."
      }
    ]
  },
  {
    "id": "12",
    "title": "Deck 12",
    "questions": [
      {
        "question": "null == undefined",
        "explanation": "In JavaScript, null is loosely equal to undefined. So, null == undefined evaluates to true."
      },
      {
        "question": "0 == undefined",
        "explanation": "0 is loosely equal to undefined. So, 0 == undefined evaluates to false."
      },
      {
        "question": "false == undefined",
        "explanation": "Similarly, false is loosely equal to undefined. So, false == undefined evaluates to false."
      },
      {
        "question": "!(3 > 5)",
        "explanation": "The expression !(3 > 5) negates the result of the expression 3 > 5, which is false. Therefore, !(3 > 5) evaluates to true."
      },
      {
        "question": "true && false",
        "explanation": "The logical AND operator && returns true only if both operands are true. Since one of the operands, false, is false, the result is false."
      }
    ]
  },
  {
    "id": "13",
    "title": "Deck 13",
    "questions": [
      {
        "question": "undefined == 1",
        "explanation": "In JavaScript, undefined is loosely equal to null, but it is not equal to any other value like 1. So, undefined == 1 evaluates to false."
      },
      {
        "question": "null == 0",
        "explanation": "Similarly, null is not equal to 0, so null == 0 evaluates to false."
      },
      {
        "question": "false.toString() == 'false'",
        "explanation": "The toString() method converts the boolean value false to the string 'false'. So, false.toString() == 'false' evaluates to true."
      },
      {
        "question": "!!(3 > 5)",
        "explanation": "The !! operator is used to convert any value to its corresponding boolean value. In this case, !!(3 > 5) evaluates to !!false, which is false."
      },
      {
        "question": "0 ? true : false",
        "explanation": "In JavaScript, the expression 0 is considered a falsy value. So, 0 ? true : false evaluates to false."
      }
    ]
  },
  {
    "id": "14",
    "title": "Deck 14",
    "questions": [
      {
        "question": "+[] === 0",
        "explanation": "The unary plus operator converts an empty array to the number 0. So, +[] === 0 evaluates to true."
      },
      {
        "question": "typeof function(){} == 'object'",
        "explanation": "The typeof operator returns 'function' for function objects in JavaScript. So, typeof function(){} == 'object' evaluates to false."
      },
      {
        "question": "typeof [] == 'array'",
        "explanation": "The typeof operator returns 'object' for arrays in JavaScript. So, typeof [] == 'array' evaluates to false."
      },
      {
        "question": "Array.isArray([])",
        "explanation": "The Array.isArray() method is used to check if a value is an array. So, Array.isArray([]) evaluates to true."
      },
      {
        "question": "2 === +'1' + 1",
        "explanation": "The expression '2 === +'1' + 1' is evaluated as '2 === (1 + 1)', which is '2 === 2', resulting in true."
      }
    ]
  },
  {
    "id": "15",
    "title": "Deck 15",
    "questions": [
      {
        "question": "+{} == 0",
        "explanation": "The unary plus operator cannot directly convert an object to a number. So, +{} == 0 evaluates to false."
      },
      {
        "question": "typeof true == 'object'",
        "explanation": "The typeof operator returns 'boolean' for boolean values in JavaScript. So, typeof true == 'object' evaluates to false."
      },
      {
        "question": "+[] + 1 == 1",
        "explanation": "The unary plus operator converts an empty array to 0. So, +[] + 1 == 1 evaluates to true."
      },
      {
        "question": "3 == 4 - true",
        "explanation": "The expression '4 - true' is evaluated as '4 - 1', resulting in 3. So, 3 == 3 evaluates to true."
      },
      {
        "question": "14 == true * 14",
        "explanation": "The expression 'true * 14' is evaluated as '1 * 14', resulting in 14. So, 14 == 14 evaluates to true."
      }
    ]
  },
  {
    "id": "16",
    "title": "Deck 16",
    "questions": [
      {
        "question": "12 % 2 == []",
        "explanation": "12 % 2 gives the remainder of the division, which is 0. [] is coerced to 0 in this context. So, 12 % 2 == [] evaluates to true."
      },
      {
        "question": "[] - true === -1",
        "explanation": "An empty array [] is converted to 0 when used with the subtraction operator. true is converted to 1. So, [] - true === -1 evaluates to false."
      },
      {
        "question": "'1' - '1' === 0",
        "explanation": "When subtracting strings, JavaScript tries to convert them to numbers. '1' - '1' results in 0 because both strings are converted to numbers. Hence, '1' - '1' === 0 evaluates to true."
      },
      {
        "question": "Boolean('null') === false",
        "explanation": "The string 'null' is not empty, so Boolean('null') returns true. Therefore, Boolean('null') === false evaluates to false."
      },
      {
        "question": "'you liked and subscribed'",
        "explanation": "This statement is incomplete and lacks a comparison, so it is not a valid JavaScript expression."
      }
    ]
  },
  {
    "id": "17",
    "title": "Deck 17",
    "questions": [
      {
        "question": "Infinity === Infinity - 1",
        "explanation": "Infinity - 1 is still Infinity. Therefore, Infinity === Infinity - 1 evaluates to true."
      },
      {
        "question": "-Infinity === Infinity * -1",
        "explanation": "-Infinity multiplied by -1 results in Infinity. So, -Infinity === Infinity * -1 evaluates to true."
      },
      {
        "question": "Infinity === Infinity + 1",
        "explanation": "Infinity + 1 is still Infinity. Therefore, Infinity === Infinity + 1 evaluates to true."
      },
      {
        "question": "0 / 0 == Infinity",
        "explanation": "The result of 0 divided by 0 is NaN (Not a Number), not Infinity. So, 0 / 0 == Infinity evaluates to false."
      },
      {
        "question": "12 / 0 == Infinity",
        "explanation": "Division by 0 in JavaScript results in Infinity. So, 12 / 0 == Infinity evaluates to true."
      }
    ]
  },
  {
    "id": "18",
    "title": "Deck 18",
    "questions": [
      {
        "question": "'bab' > 'aba'",
        "explanation": "In lexicographical order, 'bab' comes after 'aba', so 'bab' > 'aba' evaluates to true."
      },
      {
        "question": "4.5 + 5.5 == 10",
        "explanation": "The sum of 4.5 and 5.5 is 10. So, 4.5 + 5.5 == 10 evaluates to true."
      },
      {
        "question": "typeof new Date() == 'date'",
        "explanation": "The typeof operator returns 'object' for instances of Date in JavaScript. Therefore, typeof new Date() == 'date' evaluates to false."
      },
      {
        "question": "typeof 'aaa' == 'string'",
        "explanation": "The typeof operator returns 'string' for string literals in JavaScript. Therefore, typeof 'aaa' == 'string' evaluates to true."
      },
      {
        "question": "({} == {})",
        "explanation": "Objects are compared by reference in JavaScript. {} and {} refer to different memory locations, so {} == {} evaluates to false."
      }
    ]
  },
  {
    "id": "19",
    "title": "Deck 19",
    "questions": [
      {
        "question": "({}).toString() == '[object Object]'",
        "explanation": "The toString() method of an object returns '[object Object]'. So, ({}).toString() == '[object Object]' evaluates to true."
      },
      {
        "question": "NaN === NaN",
        "explanation": "NaN is not equal to any other value, including itself. So, NaN === NaN evaluates to false."
      },
      {
        "question": "4 / 2 * 2 === 1",
        "explanation": "4 divided by 2 is 2. Then, 2 multiplied by 2 is 4. So, 4 / 2 * 2 === 1 evaluates to false."
      },
      {
        "question": "false + 1 === 2",
        "explanation": "false is coerced to 0 when used in a numerical context. So, false + 1 is 0 + 1, which equals 1. Therefore, false + 1 === 2 evaluates to false."
      },
      {
        "question": "[].join() == []",
        "explanation": "The join() method returns a string representation of the array elements joined by a separator. However, the comparison attempts to equate a string to an array, which evaluates to false."
      }
    ]
  },
  {
    "id": "20",
    "title": "Deck 20",
    "questions": [
      {
        "question": "null == null",
        "explanation": "The value null is equal only to itself. So, null == null evaluates to true."
      },
      {
        "question": "undefined == 0",
        "explanation": "Undefined is not equal to any other value except null. So, undefined == 0 evaluates to false."
      },
      {
        "question": "undefined === undefined",
        "explanation": "The strict equality operator (===) checks for both value and type equality. undefined is strictly equal to itself. So, undefined === undefined evaluates to true."
      },
      {
        "question": "false == ''",
        "explanation": "The boolean value false is not equal to the empty string ''. So, false == '' evaluates to false."
      },
      {
        "question": "'a' > true",
        "explanation": "In JavaScript, when comparing different types, they are converted to numbers. 'a' is NaN when converted to a number, and true is converted to 1. Since NaN is not greater than 1, 'a' > true evaluates to false."
      }
    ]
  },
  {
    "id": "21",
    "title": "Deck 21",
    "questions": [
      {
        "question": "'nate' > 'cool'",
        "explanation": "'nate' > 'cool' evaluates to true because in lexicographical order, 'n' comes after 'c'."
      },
      {
        "question": "'a' > 'z'",
        "explanation": "'a' > 'z' evaluates to false because 'a' comes before 'z' in lexicographical order."
      },
      {
        "question": "Boolean()",
        "explanation": "Boolean() returns false because the Boolean constructor without arguments returns false."
      },
      {
        "question": "'1' == 2 - 1",
        "explanation": "'1' == 2 - 1 evaluates to true because 2 - 1 equals 1, which is equal to the string '1'."
      },
      {
        "question": "3 == '2' + '1'",
        "explanation": "3 == '2' + '1' evaluates to true because '2' + '1' results in the string '21', which is then converted to the number 21."
      }
    ]
  },
  {
    "id": "22",
    "title": "Deck 22",
    "questions": [
      {
        "question": "3 == 2 + '1'",
        "explanation": "3 == 2 + '1' evaluates to true because '2' + '1' results in the string '21', which is then converted to the number 21."
      },
      {
        "question": "45 === '4' + '5'",
        "explanation": "45 === '4' + '5' evaluates to true because '4' + '5' results in the string '45', which is then compared strictly to the number 45."
      },
      {
        "question": "[] == []",
        "explanation": "[] == [] evaluates to false because arrays in JavaScript are compared by reference, and these two arrays are stored in different memory locations."
      },
      {
        "question": "({} == {})",
        "explanation": "{} == {} evaluates to false because objects in JavaScript are compared by reference, and these two objects are stored in different memory locations."
      },
      {
        "question": "(5 == 5 || 3 == 5)",
        "explanation": "(5 == 5 || 3 == 5) evaluates to true because the expression (5 == 5) is true, and in a logical OR operation, if one expression is true, the whole expression is true."
      }
    ]
  },
  {
    "id": "23",
    "title": "Deck 23",
    "questions": [
      {
        "question": "!([] == [])",
        "explanation": "!([] == []) evaluates to true because arrays in JavaScript are compared by reference, and these two arrays are stored in different memory locations."
      },
      {
        "question": "typeof [] !== 'array'",
        "explanation": "typeof [] !== 'array' evaluates to true because in JavaScript, the typeof operator returns 'object' for arrays."
      },
      {
        "question": "'2' > '1'",
        "explanation": "'2' > '1' evaluates to true because in lexicographical order, '2' comes after '1'."
      },
      {
        "question": "2 < 'John'",
        "explanation": "2 < 'John' evaluates to false because the comparison between a number and a string results in the string being converted to NaN, which is not less than any number."
      },
      {
        "question": "Number('3.14') === 3.14",
        "explanation": "Number('3.14') === 3.14 evaluates to true because Number('3.14') converts the string '3.14' to the number 3.14, which is strictly equal to 3.14."
      }
    ]
  },
  {
    "id": "24",
    "title": "Deck 24",
    "questions": [
      {
        "question": "Number(5) == 5",
        "explanation": "Number(5) == 5 evaluates to true because the Number constructor converts its argument to a number, which is then compared to 5."
      },
      {
        "question": "typeof Number('Nate') == 'number'",
        "explanation": "typeof Number('Nate') == 'number' evaluates to true because Number('Nate') returns NaN, which is of type 'number'."
      },
      {
        "question": "typeof NaN == 'number'",
        "explanation": "typeof NaN == 'number' evaluates to true because NaN is classified as a number type in JavaScript."
      },
      {
        "question": "Number([]) === 0",
        "explanation": "Number([]) === 0 evaluates to true because the empty array [] is converted to 0 when using the Number function."
      },
      {
        "question": "Number([]) === NaN",
        "explanation": "Number([]) === NaN evaluates to false because an empty array [] is converted to 0 by the Number function, not NaN."
      }
    ]
  },
  {
    "id": "25",
    "title": "Deck 25",
    "questions": [
      {
        "question": "parseInt([]) === 0",
        "explanation": "parseInt([]) === 0 evaluates to true because parseInt([]) returns NaN, and NaN is not equal to any number including 0."
      },
      {
        "question": "Number([]) === 0",
        "explanation": "Number([]) === 0 evaluates to true because the empty array [] is converted to 0 when using the Number function."
      },
      {
        "question": "+[] === 0",
        "explanation": "+[] === 0 evaluates to true because the unary plus operator converts the empty array [] to 0."
      },
      {
        "question": "Number.isInteger(5)",
        "explanation": "Number.isInteger(5) evaluates to true because 5 is an integer."
      },
      {
        "question": "typeof Math.random() === 'string'",
        "explanation": "typeof Math.random() === 'string' evaluates to false because Math.random() returns a number between 0 (inclusive) and 1 (exclusive)."
      }
    ]
  },
  {
    "id": "26",
    "title": "Deck 26",
    "questions": [
      {
        "question": "Number((() => {})) == 1",
        "explanation": "Number((() => {})) == 1 evaluates to false because an empty function (() => {}) returns undefined when coerced to a number."
      },
      {
        "question": "(() => 1)() == 1",
        "explanation": "(() => 1)() == 1 evaluates to true because the arrow function (() => 1) returns 1 when invoked."
      },
      {
        "question": "Boolean(3 - 3 / 3)",
        "explanation": "Boolean(3 - 3 / 3) evaluates to false because the expression 3 - 3 / 3 results in 2, and Boolean(2) returns true."
      },
      {
        "question": "typeof Number() == 'number'",
        "explanation": "typeof Number() == 'number' evaluates to true because Number() returns 0, which is of type 'number'."
      },
      {
        "question": "typeof String(55) == '55'",
        "explanation": "typeof String(55) == '55' evaluates to false because the typeof operator returns 'string' for string values, not their content."
      }
    ]
  },
  {
    "id": "27",
    "title": "Deck 27",
    "questions": [
      {
        "question": "[] == ![]",
        "explanation": "[] == ![]: This expression evaluates to true because according to JavaScript's coercion rules, the array ([]), when coerced to a boolean, becomes true. Then, applying the logical NOT operator (!) converts it to false. Hence, it's equivalent to comparing an empty array to false, which coerces the array to an empty string, resulting in '' == ''. Both sides are coerced to the same value, so the result is true."
      },
      {
        "question": "{} + [] === {}",
        "explanation": "{} + [] === {}: This expression evaluates to NaN (Not a Number) because the addition operator (+) between an object ({}) and an array ([]) is not defined. Therefore, the result is NaN. Since NaN is not equal to any other value including itself, the expression evaluates to false."
      },
      {
        "question": "NaN === NaN",
        "explanation": "NaN === NaN: This expression evaluates to false because NaN (Not a Number) is a special value in JavaScript, and according to the IEEE 754 standard, NaN is not equal to any other value, including itself."
      },
      {
        "question": "true + false === true",
        "explanation": "true + false === true: This expression evaluates to false because the addition operator (+) is used between true and false. In JavaScript, when you add a boolean value to another value, it gets converted to a number. true is converted to 1, and false is converted to 0. So, 1 + 0 equals 1, not true."
      },
      {
        "question": "NaN !== NaN",
        "explanation": "NaN !== NaN: This expression evaluates to true because NaN (Not a Number) is a special value in JavaScript, and according to the IEEE 754 standard, NaN is not equal to any other value, including itself. Hence, NaN !== NaN."
      }
    ]
  },
  {
    "id": "28",
    "title": "Deck 28",
    "questions": [
      {
        "question": "Infinity == undefined"
      },
      {
        "question": "Infinity == Infinity"
      },
      {
        "question": "0 / 0 == NaN"
      },
      {
        "question": "NaN == NaN"
      },
      {
        "question": "Boolean('false')"
      }
    ]
  },
  {
    "id": "29",
    "title": "Deck 29",
    "questions": [
      {
        "question": "'' || true"
      },
      {
        "question": "null || true"
      },
      {
        "question": "undefined || true"
      },
      {
        "question": "'2' < '12'"
      },
      {
        "question": "'2' > '12'"
      }
    ]
  },
  {
    "id": "30",
    "title": "Deck 30",
    "questions": [
      {
        "question": "false ?? true"
      },
      {
        "question": "false || true"
      },
      {
        "question": "null || true"
      },
      {
        "question": "null ?? true"
      },
      {
        "question": "true ?? false"
      }
    ]
  },
  {
    "id": "31",
    "title": "Deck 31",
    "questions": [
      {
        "question": "[] ? true : false"
      },
      {
        "question": "({}) ? true : false"
      },
      {
        "question": "({}).key ? true : false"
      },
      {
        "question": "'' ? true : false"
      },
      {
        "question": "' ' ? true : false"
      }
    ]
  }
]
