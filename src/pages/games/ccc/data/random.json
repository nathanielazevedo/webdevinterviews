[
  {
    "id": "1",
    "title": "Deck 1",
    "questions": [
      "1.1 ??? 2",
      "true ??? false",
      "'dog' ??? 'cat'",
      "'1' ??? 1",
      "'true' ??? true"
    ],
    "allowNots": [false, false, false, false, true],
    "explanations": [
      "Basic math question to warm up.",
      "When comparing booleans, JavaScript turns both booleans to numbers. True coerced to a number is 1. False coerced to a number is 0. The comparison becomes 1 ??? 0. There are multiple correct answers including >, != and !==.",
      "When comparing strings, JavaScript compares their Unicode values letter by letter. For the most part, letters later in the alphabet are considered greater than letters early in the alphabet. In this question 'd' is larger than 'c'. Possible answers are >, !==, and !=.",
      "When comparing strings to numbers, JavaScript attempts to turn strings to numbers. So JS converts the string '1' to the number 1. The comparison after coercion the is 1 ??? 1. It is important to keep in mind that === will compare value types. Therefore, the answer is ==.",
      "The second true is converted to the number 1. JavaScript then tries to convert the string 'true' to a number, resulting in NaN. After coercion the comparison is NaN ??? 1. The answer is !== or !=="
    ],
    "public": true
  },
  {
    "id": "2",
    "title": "Deck 2",
    "questions": [
      "[] ??? {}",
      "1 ??? '1'",
      "'true' ??? true",
      "1.0 ??? 1.00",
      "'a' ??? 0"
    ],
    "allowNots": [false, false, true, false, true],
    "explanations": [
      "When comparing different types like an array and an object, the abstract relational comparison algorithm is applied. This converts the operands to primitives and then compares them. An empty array ([]) gets coerced to the empty string (''), while an empty object ({}) gets coerced to '[object Object]'. After coercion we are comparing these strings, '' ??? '[object Object]'. If all else is equal, the shorter string is considered less than the longer string. Therefore the answer is <.",
      "When comparing a number to a string, JavaScript attempts to turn strings to numbers. In this case, '1' gets converted to a number, and the comparison becomes 1 ??? 1. Therefore the answer is ==.",
      "JavaScript attempts to coerce the string 'true' to a number, resulting in NaN (not a number), while the boolean true gets converted to 1. After coercion the comparison is NaN ??? 1. Therefore, the answer is !==",
      "When comparing numbers, the number of trailing zeros doesn't matter. Both 1.0 and 1.00 are the same numeric value. Therefore, the answer is ===..",
      "When comparing a string and a number, JavaScript attempts to turn strings to numbers. The string 'a' gets converted to NaN. After coercion the comparison is NaN ??? 0. Therefore, the answer is !=="
    ],
    "public": true
  },
  {
    "id": "3",
    "title": "Deck 3",
    "questions": [
      "(100 / '10') ??? 10",
      "10 + '10' ??? 1010",
      "10 - '10' ??? 1010",
      "true + 10 ??? 11",
      "0.1 + 0.2 ??? 0.3"
    ],
    "explanations": [
      "When dividing a number by a string, JavaScript performs type coercion. The string '10' is converted to a number, resulting in 100 / 10 which is 10. The comparison becomes 10 ??? 10. Types were originally the same so the most proper answer is ===.",
      "When using the + operator with a number and a string, JavaScript performs string concatenation. In this case, '10' is concatenated to 10, resulting in '1010'. The comparison become '1010' ??? 1010. Answers can be == or !==.",
      "The subtraction operator (-) in JavaScript coerces the string '10' into a number, and the expression becomes 10 - 10, which equals 0. The comparison becomes 0 ??? 1010. Possible answers are !== or !=== or <.",
      "In JavaScript, when a boolean value (true) is used with the + operator, it's converted to a number (1). Thus, the expression becomes 1 + 10. The resulting comparison is 11 ??? 11. Possible answers are == and ===.",
      "Floating-point arithmetic in JavaScript can sometimes lead to unexpected results due to how floating-point numbers are represented. In this case, 0.1 + 0.2 results in 0.30000000000000004, not 0.3. The comparison becomes 0.30000000000000004 ??? 0.3. Possible answers are >, != and !==."
    ],
    "public": true
  },
  {
    "id": "4",
    "title": "Deck 4",
    "questions": [
      "typeof NaN ??? 'number'",
      "null ??? undefined",
      "NaN ??? NaN",
      "Infinity ??? 1000",
      "Boolean('false') ??? false"
    ],
    "explanations": [
      "The typeof operator in JavaScript returns 'number' for NaN (Not a Number). Although NaN represents an invalid number, it is still considered a numeric data type. The comparison becomes 'number' ??? 'number'. Therefore, the answer is ===.",
      "In JavaScript, null and undefined are loosely equal (==) but not strictly equal (===). So, null == undefined is true, but null === undefined is false. Therefore, the answer is ==.",
      "In JavaScript, NaN (Not a Number) is considered to be unequal to every value, including itself. Therefore the possible answers are != and !==.",
      "In JavaScript, Infinity represents a value greater than any other number. Therefore, the answer is >.",
      "The expression Boolean('false') evaluates to true because any non-empty string, including 'false', evaluates to true in a Boolean context. The comparison becomes true ??? false. Possible answers are >, != and !==."
    ],
    "public": true
  },
  {
    "id": "5",
    "title": "Deck 5",
    "questions": [
      "({}).toString() ??? '[object Object]'",
      "[].toString() ??? ''",
      "let dog = {}; let cat = dog; dog ??? cat",
      "false + 10 ??? 9",
      "undefined ??? 0"
    ],
    "explanations": [
      "In JavaScript, when an object is converted to a string, its default string representation is '[object Object]'. The comparision becomes, '[object Object]' ??? '[object Object]'. Therefore, the answer is ==.",
      "The `toString()` method of an empty array returns an empty string. The comparison becomes '' ??? ''. Therefore, the answer is ==.",
      "In JavaScript, objects are reference types. When `cat` is assigned the value of `dog`, they refer to the same object. Therefore, the answer is ==.",
      "In JavaScript, `false` is coerced to the number 0 when used with the `+` operator. So, `false + 10` equals 10. The comparision becomes 10 ??? 10. The answer is ==.",
      "In JavaScript, when comparing `undefined` with a number, `undefined` is coerced to `NaN` (Not a Number). The comparison becomes NaN ??? 0. NaN is equivalent to no other values. Therefore, the answer is !=."
    ],
    "public": true
  },
  {
    "id": "6",
    "title": "Deck 6",
    "questions": [
      "{} + [] ??? 0",
      "Math.min() ??? Math.max()",
      "{} ??? []",
      "null ??? 0",
      "NaN ??? NaN"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "7",
    "title": "Deck 7",
    "questions": [
      "'a' ??? 'b'",
      "2 + 2 + '2' ??? 42",
      "'2' + 2 + 2 ??? 24",
      "2 ??? 'a'",
      "2 ??? '1'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "8",
    "title": "Deck 8",
    "questions": [
      "+true ??? 1",
      "+[] ??? 0",
      "+'123' ??? 123",
      "+{} ??? 0",
      "+['1', '2'] ??? [1, 2]"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "9",
    "title": "Deck 9",
    "questions": [
      "typeof null ??? 'null'",
      "typeof null ??? 'undefined'",
      "typeof null ??? 'object'",
      "typeof undefined ??? 'undefined'",
      "typeof typeof 1 ??? 'string'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "10",
    "title": "Deck 10",
    "questions": [
      "typeof Boolean() ??? 'boolean'",
      "Boolean(' ') ??? true",
      "Boolean(NaN.toString()) ??? true",
      "Boolean('undefined') ??? false",
      "Boolean([]) === 'a'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "11",
    "title": "Deck 11",
    "questions": [
      "true ??? false + 1",
      "true ??? 1",
      "0 ??? ''",
      "Number('     ') ??? 0",
      "'1' + 1 + 1 + 1 ??? 13"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "12",
    "title": "Deck 12",
    "questions": [
      "null ??? undefined",
      "0 ??? undefined",
      "false ??? undefined",
      "!(3 ??? 5)",
      "true && false"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "13",
    "title": "Deck 13",
    "questions": [
      "undefined ??? 1",
      "null ??? 0",
      "false.toString() ??? 'false'",
      "!!(3 ??? 5)",
      "0 ? true : false"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "14",
    "title": "Deck 14",
    "questions": [
      "+[] ??? 0",
      "typeof function(){} ??? 'object'",
      "typeof [] ??? 'array'",
      "Array.isArray([])",
      "2 ??? +'1' + 1"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "15",
    "title": "Deck 15",
    "questions": [
      "+{} ??? 0",
      "typeof true ??? 'object'",
      "+[] + 1 ??? 1",
      "3 ??? 4 - true",
      "14 ??? true * 14"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "16",
    "title": "Deck 16",
    "questions": [
      "12 % 2 ??? []",
      "[] - true ??? -1",
      "'1' - '1' ??? 0",
      "Boolean('null') ??? false",
      "'you liked and subscribed'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "17",
    "title": "Deck 17",
    "questions": [
      "Infinity ??? Infinity - 1",
      "-Infinity ??? Infinity * -1",
      "Infinity ??? Infinity + 1",
      "0 / 0 ??? Infinity",
      "12 / 0 ??? Infinity"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "18",
    "title": "Deck 18",
    "questions": [
      "'bab' ??? 'aba",
      "4.5 + 5.5 ??? 10",
      "typeof new Date() ??? 'date'",
      "typeof 'aaa' ??? 'string'",
      "{} ??? {}"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "19",
    "title": "Deck 19",
    "questions": [
      "({}).toString() ??? '[object Object]'",
      "NaN ??? NaN",
      "4 / 2 * 2 ??? 1",
      "false + 1 ??? 2",
      "[].join() ??? []"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "20",
    "title": "Deck 20",
    "questions": [
      "null ??? null",
      "undefined ??? 0",
      "undefined ??? undefined",
      "false ??? ''",
      "'a' ??? true"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "21",
    "title": "Deck 21",
    "questions": [
      "'nate' ??? 'cool'",
      "'a' ??? 'z'",
      "Boolean()",
      "'1' ??? 2 - 1",
      "3 ??? '2' + '1'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "22",
    "title": "Deck 22",
    "questions": [
      "3 ??? 2 + '1'",
      "45 ??? '4' + '5'",
      "[] ??? []",
      "{} ??? {}",
      "(5 ??? 5 || 3 ??? 5)"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "23",
    "title": "Deck 23",
    "questions": [
      "!([] ??? [])",
      "typeof [] !??? 'array'",
      "'2' ??? '1'",
      "2 < 'John'",
      "Number('3.14') ??? 3.14"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "24",
    "title": "Deck 24",
    "questions": [
      "Number(5) ??? 5",
      "typeof Number('Nate') ??? 'number'",
      "typeof NaN ??? 'number'",
      "Number([]) ??? 0",
      "Number([]) ??? NaN"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "25",
    "title": "Deck 25",
    "questions": [
      "parseInt([]) ??? 0",
      "Number([]) ??? 0",
      "+[] ??? 0",
      "Number.isInteger(5)",
      "typeof Math.random() ??? 'string'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "26",
    "title": "Deck 26",
    "questions": [
      "Number((() ??? {})) ??? 1",
      "(() => 1)() ??? 1",
      "Boolean(3 - 3 / 3)",
      "typeof Number() ??? 'number'",
      "typeof String(55) ??? '55'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "27",
    "title": "Deck 27",
    "questions": [
      "[] ??? ![]",
      "{} + [] ??? {}",
      "NaN ??? NaN",
      "true + false ??? true",
      "NaN ??? NaN"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "28",
    "title": "Deck 28",
    "questions": [
      "Infinity ??? undefined",
      "Infinity ??? Infinity",
      "0 / 0 ??? NaN",
      "NaN ??? NaN",
      "Boolean('false')"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "29",
    "title": "Deck 29",
    "questions": [
      "'' || true",
      "null || true",
      "undefined || true",
      "'2' < '12'",
      "'2' > '12'"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "30",
    "title": "Deck 30",
    "questions": [
      "false ?? true",
      "false || true",
      "null || true",
      "null ?? true",
      "true ?? false"
    ],
    "explanations": [],
    "public": false
  },
  {
    "id": "31",
    "title": "Deck 31",
    "questions": [
      "[] ? true : false",
      "({}) ? true : false",
      "({}).key ? true : false",
      "'' ? true : false",
      "' ' ? true : false"
    ],
    "explanations": [],
    "public": false
  }
]
