export default {"id":2,"name":"checkedTree","title":"Checked Tree","difficulty":"3","checkList":["Render the data in a nested structure.","Clicking a parent should expand/collapse its children.","Search should filter out matching items.","Checking a child should check all its parents.","Unchecking a parent should uncheck all its children.","Clicking submit should console an array of all the checked items IDs."],"gif":"/src/workouts/react/pure/checkedTree/checkedTree.gif","link":"https://www.youtube.com/watch?v=WX8Oplyd3Ag","solution":{"/CheckedTree.js":{"code":"/* eslint-disable react/prop-types */\nimport { useState } from 'react'\nimport { filterItems } from './utils'\n\nconst CheckboxTree = ({ data, onChange }) => {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [checkedItems, setCheckedItems] = useState({})\n  const [expandedItems, setExpandedItems] = useState({})\n\n  const handleCheckboxChange = (itemId) => {\n    const updatedCheckedItems = { ...checkedItems }\n    updatedCheckedItems[itemId] = !updatedCheckedItems[itemId]\n\n    if (updatedCheckedItems[itemId]) {\n      // If checking a child, check all parents\n      checkParents(itemId, updatedCheckedItems)\n    } else {\n      // If unchecking a parent, uncheck all children\n      uncheckAllChildren(data, itemId, updatedCheckedItems)\n    }\n\n    // update parent onChange\n    const checkedIds = Object.keys(updatedCheckedItems).filter(\n      (id) => updatedCheckedItems[id]\n    )\n    onChange(checkedIds)\n    setCheckedItems(updatedCheckedItems)\n  }\n\n  const findParent = (nodes, itemId) => {\n    for (const node of nodes) {\n      if (node.children.length > 0) {\n        if (node.children.some((child) => child.id === itemId)) {\n          return node\n        } else {\n          const parent = findParent(node.children, itemId)\n          if (parent) {\n            return parent\n          }\n        }\n      }\n    }\n    return null\n  }\n\n  const checkParents = (id, updatedCheckedItems) => {\n    updatedCheckedItems[id] = true\n    const parent = findParent(data, id)\n    if (parent) {\n      checkParents(parent.id, updatedCheckedItems)\n    }\n  }\n\n  const uncheckAllChildren = (nodes, parentId, updatedCheckedItems) => {\n    for (const node of nodes) {\n      if (node.id === parentId) {\n        // Parent found, uncheck all its children\n        uncheckChildren(node, updatedCheckedItems)\n        return\n      }\n      if (node.children.length > 0) {\n        uncheckAllChildren(node.children, parentId, updatedCheckedItems)\n      }\n    }\n  }\n\n  const uncheckChildren = (node, updatedCheckedItems) => {\n    updatedCheckedItems[node.id] = false\n    for (const child of node.children) {\n      uncheckChildren(child, updatedCheckedItems)\n    }\n  }\n\n  const handleExpandToggle = (itemId) => {\n    setExpandedItems((prevState) => ({\n      ...prevState,\n      [itemId]: !prevState[itemId],\n    }))\n  }\n\n  const handleSearchChange = (event) => {\n    setSearchQuery(event.target.value)\n  }\n\n  // Filter items based on search query\n  const filteredData = filterItems(data, searchQuery)\n\n  const renderTree = (nodes) => {\n    return (\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '20px' }}>\n        {nodes.map((node) => (\n          <li key={node.id}>\n            <div>\n              {node.children.length > 0 ? (\n                <span\n                  onClick={() => handleExpandToggle(node.id)}\n                  style={{ cursor: 'pointer', marginRight: '5px' }}\n                >\n                  {expandedItems[node.id] ? `v` : '>'}\n                </span>\n              ) : (\n                <span>&nbsp;&nbsp;&nbsp;</span>\n              )}\n              <label>\n                <input\n                  type='checkbox'\n                  checked={checkedItems[node.id] || false}\n                  onChange={() => handleCheckboxChange(node.id)}\n                />\n                {node.name}\n              </label>\n            </div>\n            {expandedItems[node.id] &&\n              node.children.length > 0 &&\n              renderTree(node.children)}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  return (\n    <div style={{ border: 'solid grey 1px', width: '100%' }}>\n      <input\n        placeholder='Search...'\n        value={searchQuery}\n        onChange={handleSearchChange}\n        style={{ width: '100%', padding: '10px' }}\n      />\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '0px' }}>\n        {renderTree(filteredData)}\n      </ul>\n    </div>\n  )\n}\n\nexport default CheckboxTree\n"},"/asString.js":{"code":"export default {\n  '/CheckedTree.js': {\n    code: \"/* eslint-disable react/prop-types */\\nimport { useState } from 'react'\\nimport { filterItems, findParent } from './utils'\\n\\nconst CheckboxTree = ({ data, onChange }) => {\\n  const [searchQuery, setSearchQuery] = useState('')\\n  const [checkedItems, setCheckedItems] = useState({})\\n  const [expandedItems, setExpandedItems] = useState({})\\n\\n  const handleCheckboxChange = (itemId) => {\\n    const updatedCheckedItems = { ...checkedItems }\\n    updatedCheckedItems[itemId] = !updatedCheckedItems[itemId]\\n\\n    if (updatedCheckedItems[itemId]) {\\n      // If checking a child, check all parents\\n      checkParents(itemId, updatedCheckedItems)\\n    } else {\\n      // If unchecking a parent, uncheck all children\\n      uncheckAllChildren(data, itemId, updatedCheckedItems)\\n    }\\n\\n    // update parent onChange\\n    const checkedIds = Object.keys(updatedCheckedItems).filter(\\n      (id) => updatedCheckedItems[id]\\n    )\\n    onChange(checkedIds)\\n    setCheckedItems(updatedCheckedItems)\\n  }\\n\\n  const findParent = (nodes, itemId) => {\\n    for (const node of nodes) {\\n      if (node.children.length > 0) {\\n        if (node.children.some((child) => child.id === itemId)) {\\n          return node\\n        } else {\\n          const parent = findParent(node.children, itemId)\\n          if (parent) {\\n            return parent\\n          }\\n        }\\n      }\\n    }\\n    return null\\n  }\\n\\n  const checkParents = (id, updatedCheckedItems) => {\\n    updatedCheckedItems[id] = true\\n    const parent = findParent(data, id)\\n    if (parent) {\\n      checkParents(parent.id, updatedCheckedItems)\\n    }\\n  }\\n\\n  const uncheckAllChildren = (nodes, parentId, updatedCheckedItems) => {\\n    for (const node of nodes) {\\n      if (node.id === parentId) {\\n        // Parent found, uncheck all its children\\n        uncheckChildren(node, updatedCheckedItems)\\n        return\\n      }\\n      if (node.children.length > 0) {\\n        uncheckAllChildren(node.children, parentId, updatedCheckedItems)\\n      }\\n    }\\n  }\\n\\n  const uncheckChildren = (node, updatedCheckedItems) => {\\n    updatedCheckedItems[node.id] = false\\n    for (const child of node.children) {\\n      uncheckChildren(child, updatedCheckedItems)\\n    }\\n  }\\n\\n  const handleExpandToggle = (itemId) => {\\n    setExpandedItems((prevState) => ({\\n      ...prevState,\\n      [itemId]: !prevState[itemId],\\n    }))\\n  }\\n\\n  const handleSearchChange = (event) => {\\n    setSearchQuery(event.target.value)\\n  }\\n\\n  // Filter items based on search query\\n  const filteredData = filterItems(data, searchQuery)\\n\\n  const renderTree = (nodes) => {\\n    return (\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '20px' }}>\\n        {nodes.map((node) => (\\n          <li key={node.id}>\\n            <div>\\n              {node.children.length > 0 ? (\\n                <span\\n                  onClick={() => handleExpandToggle(node.id)}\\n                  style={{ cursor: 'pointer', marginRight: '5px' }}\\n                >\\n                  {expandedItems[node.id] ? `v` : '>'}\\n                </span>\\n              ) : (\\n                <span>&nbsp;&nbsp;&nbsp;</span>\\n              )}\\n              <label>\\n                <input\\n                  type='checkbox'\\n                  checked={checkedItems[node.id] || false}\\n                  onChange={() => handleCheckboxChange(node.id)}\\n                />\\n                {node.name}\\n              </label>\\n            </div>\\n            {expandedItems[node.id] &&\\n              node.children.length > 0 &&\\n              renderTree(node.children)}\\n          </li>\\n        ))}\\n      </ul>\\n    )\\n  }\\n\\n  return (\\n    <div style={{ border: 'solid grey 1px', width: '100%' }}>\\n      <input\\n        placeholder='Search...'\\n        value={searchQuery}\\n        onChange={handleSearchChange}\\n        style={{ width: '100%', padding: '10px' }}\\n      />\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '0px' }}>\\n        {renderTree(filteredData)}\\n      </ul>\\n    </div>\\n  )\\n}\\n\\nexport default CheckboxTree\\n\",\n  },\n  '/utils.js': {\n    code: 'const formatData = (data) => {\\n  const map = {}\\n  const result = []\\n\\n  // Create a map of items by their ID for quick access\\n  data.forEach((item) => {\\n    item.children = []\\n    map[item.id] = item\\n  })\\n\\n  // Iterate through the items to build the tree\\n  data.forEach((item) => {\\n    if (item.parentId !== null) {\\n      // If the item has a parent, push it into its parent\\'s \"children\" array\\n      map[item.parentId].children.push(item)\\n    } else {\\n      // If the item has no parent, it\\'s a top-level item, so add it to the result\\n      result.push(item)\\n    }\\n  })\\n  return result\\n}\\n\\n// Recursive function to filter items based on search query, including children\\nconst filterItems = (nodes, query) => {\\n  return nodes.filter((node) => {\\n    const isMatch = node.name.toLowerCase().includes(query.toLowerCase())\\n    if (isMatch) {\\n      return true\\n    }\\n    if (node.children.length > 0) {\\n      return filterItems(node.children, query).length > 0\\n    }\\n    return false\\n  })\\n}\\n\\nconst findParent = (nodes, itemId) => {\\n  for (const node of nodes) {\\n    if (node.id === itemId) {\\n      return null // Root node reached\\n    }\\n    if (node.children.length > 0) {\\n      if (node.children.some((child) => child.id === itemId)) {\\n        return node\\n      } else {\\n        const parent = findParent(node.children, itemId)\\n        if (parent) {\\n          return parent\\n        }\\n      }\\n    }\\n  }\\n  return null\\n}\\n\\nexport { filterItems, findParent, formatData }\\n',\n  },\n  '/App.js': {\n    code: \"import './styles.css'\\nimport data from './data'\\nimport { useState } from 'react'\\nimport { formatData } from './utils'\\nimport CheckedTree from './CheckedTree'\\n\\nconst Main = () => {\\n  const items = formatData(data)\\n  const [formData, setFormData] = useState({ checkedTree: [] })\\n\\n  const handleSubmit = () => {\\n    console.log(formData)\\n  }\\n\\n  return (\\n    <div className='container'>\\n      <h1>Mock Form</h1>\\n      <input placeholder='Mock Input' className='common' />\\n      <input placeholder='Mock Input' className='common' />\\n      <CheckedTree\\n        data={items}\\n        onChange={(checkedItems) => {\\n          setFormData((prevFormData) => ({\\n            ...prevFormData,\\n            checkedTree: checkedItems,\\n          }))\\n        }}\\n      />\\n      <button onClick={handleSubmit} className='common'>\\n        Submit\\n      </button>\\n    </div>\\n  )\\n}\\n\\nexport default Main\\n\",\n  },\n  '/data.js': {\n    code: \"const response = [\\n  { id: 4, parentId: 3, name: 'Days' },\\n  { id: 1, parentId: null, name: 'Years' },\\n  { id: 2, parentId: 1, name: 'Months' },\\n  { id: 5, parentId: null, name: 'Stars' },\\n  { id: 3, parentId: 2, name: 'Weeks' },\\n  { id: 6, parentId: 5, name: 'Sun' },\\n  { id: 7, parentId: 5, name: 'Proxima Centauri' },\\n  { id: 8, parentId: null, name: 'Dogs' },\\n]\\n\\nexport default response\\n\",\n  },\n  '/styles.css': {\n    code: '* {\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n.container {\\n  margin: 30px;\\n  width: 500px;\\n  color: black;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n}\\n\\n.common {\\n  width: 100%;\\n  padding: 10px;\\n}\\n',\n  },\n  '/asString.js': {\n    code: \"export default {\\n  '/asString.js': {\\n    code: \\\"export default {\\\\n  '/App.js':\\\\n    \\\\\\\"import './styles.css'\\\\\\\\nimport data from './data'\\\\\\\\nimport { useState } from 'react'\\\\\\\\nimport { formatData } from './utils'\\\\\\\\nimport CheckedTree from './CheckedTree'\\\\\\\\n\\\\\\\\nconst Main = () => {\\\\\\\\n  const [items] = useState(formatData(data))\\\\\\\\n  const [formData, setFormData] = useState({ checkedTree: [] })\\\\\\\\n\\\\\\\\n  const handleSubmit = () => {\\\\\\\\n    console.log(formData)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className='container'>\\\\\\\\n      <h1>Mock Form</h1>\\\\\\\\n      <input placeholder='Mock Input' className='common' />\\\\\\\\n      <input placeholder='Mock Input' className='common' />\\\\\\\\n      <CheckedTree\\\\\\\\n        data={items}\\\\\\\\n        onChange={(checkedItems) => {\\\\\\\\n          setFormData((prevFormData) => ({\\\\\\\\n            ...prevFormData,\\\\\\\\n            checkedTree: checkedItems,\\\\\\\\n          }))\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      <button onClick={handleSubmit} className='common'>\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n    </div>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default Main\\\\\\\\n\\\\\\\",\\\\n  '/styles.css':\\\\n    '* {\\\\\\\\n  -webkit-box-sizing: border-box;\\\\\\\\n  -moz-box-sizing: border-box;\\\\\\\\n  box-sizing: border-box;\\\\\\\\n}\\\\\\\\n\\\\\\\\n.container {\\\\\\\\n  margin: 30px;\\\\\\\\n  width: 500px;\\\\\\\\n  color: black;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 10px;\\\\\\\\n}\\\\\\\\n\\\\\\\\n.common {\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 10px;\\\\\\\\n}\\\\\\\\n',\\\\n  '/data.js':\\\\n    \\\\\\\"const response = [\\\\\\\\n  { id: 4, parentId: 3, name: 'Days' },\\\\\\\\n  { id: 1, parentId: null, name: 'Years' },\\\\\\\\n  { id: 2, parentId: 1, name: 'Months' },\\\\\\\\n  { id: 5, parentId: null, name: 'Stars' },\\\\\\\\n  { id: 3, parentId: 2, name: 'Weeks' },\\\\\\\\n  { id: 6, parentId: 5, name: 'Sun' },\\\\\\\\n  { id: 7, parentId: 5, name: 'Proxima Centauri' },\\\\\\\\n  { id: 8, parentId: null, name: 'Dogs' },\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport default response\\\\\\\\n\\\\\\\",\\\\n  '/CheckedTree.js':\\\\n    \\\\\\\"/* eslint-disable react/prop-types */\\\\\\\\nimport { useState } from 'react'\\\\\\\\nimport { filterItems, findParent } from './utils'\\\\\\\\n\\\\\\\\nconst CheckboxTree = ({ data, onChange }) => {\\\\\\\\n  const [searchQuery, setSearchQuery] = useState('')\\\\\\\\n  const [checkedItems, setCheckedItems] = useState({})\\\\\\\\n  const [expandedItems, setExpandedItems] = useState({})\\\\\\\\n\\\\\\\\n  const handleCheckboxChange = (itemId) => {\\\\\\\\n    const updatedCheckedItems = { ...checkedItems }\\\\\\\\n    updatedCheckedItems[itemId] = !updatedCheckedItems[itemId]\\\\\\\\n\\\\\\\\n    if (updatedCheckedItems[itemId]) {\\\\\\\\n      // If checking a child, check all parents\\\\\\\\n      checkAllParents(data, itemId, updatedCheckedItems)\\\\\\\\n    } else {\\\\\\\\n      // If unchecking a parent, uncheck all children\\\\\\\\n      uncheckAllChildren(data, itemId, updatedCheckedItems)\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // update parent onChange\\\\\\\\n    const checkedIds = Object.keys(updatedCheckedItems).filter(\\\\\\\\n      (id) => updatedCheckedItems[id]\\\\\\\\n    )\\\\\\\\n    onChange(checkedIds)\\\\\\\\n    setCheckedItems(updatedCheckedItems)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const checkAllParents = (nodes, childId, updatedCheckedItems) => {\\\\\\\\n    for (const node of nodes) {\\\\\\\\n      if (node.id === childId) {\\\\\\\\n        // Child found, check all its parents\\\\\\\\n        checkParents(node, updatedCheckedItems)\\\\\\\\n        return\\\\\\\\n      }\\\\\\\\n      if (node.children.length > 0) {\\\\\\\\n        checkAllParents(node.children, childId, updatedCheckedItems)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const checkParents = (node, updatedCheckedItems) => {\\\\\\\\n    updatedCheckedItems[node.id] = true\\\\\\\\n    const parent = findParent(data, node.id)\\\\\\\\n    if (parent) {\\\\\\\\n      checkParents(parent, updatedCheckedItems)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const uncheckAllChildren = (nodes, parentId, updatedCheckedItems) => {\\\\\\\\n    for (const node of nodes) {\\\\\\\\n      if (node.id === parentId) {\\\\\\\\n        // Parent found, uncheck all its children\\\\\\\\n        uncheckChildren(node, updatedCheckedItems)\\\\\\\\n        return\\\\\\\\n      }\\\\\\\\n      if (node.children.length > 0) {\\\\\\\\n        uncheckAllChildren(node.children, parentId, updatedCheckedItems)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const uncheckChildren = (node, updatedCheckedItems) => {\\\\\\\\n    updatedCheckedItems[node.id] = false\\\\\\\\n    for (const child of node.children) {\\\\\\\\n      uncheckChildren(child, updatedCheckedItems)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleExpandToggle = (itemId) => {\\\\\\\\n    setExpandedItems((prevState) => ({\\\\\\\\n      ...prevState,\\\\\\\\n      [itemId]: !prevState[itemId],\\\\\\\\n    }))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleSearchChange = (event) => {\\\\\\\\n    setSearchQuery(event.target.value)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Filter items based on search query\\\\\\\\n  const filteredData = filterItems(data, searchQuery)\\\\\\\\n\\\\\\\\n  const renderTree = (nodes) => {\\\\\\\\n    return (\\\\\\\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '20px' }}>\\\\\\\\n        {nodes.map((node) => (\\\\\\\\n          <li key={node.id}>\\\\\\\\n            <div>\\\\\\\\n              {node.children.length > 0 ? (\\\\\\\\n                <span\\\\\\\\n                  onClick={() => handleExpandToggle(node.id)}\\\\\\\\n                  style={{ cursor: 'pointer', marginRight: '5px' }}\\\\\\\\n                >\\\\\\\\n                  {expandedItems[node.id] ? `v` : '>'}\\\\\\\\n                </span>\\\\\\\\n              ) : (\\\\\\\\n                <span>&nbsp;&nbsp;&nbsp;</span>\\\\\\\\n              )}\\\\\\\\n              <label>\\\\\\\\n                <input\\\\\\\\n                  type='checkbox'\\\\\\\\n                  checked={checkedItems[node.id] || false}\\\\\\\\n                  onChange={() => handleCheckboxChange(node.id)}\\\\\\\\n                />\\\\\\\\n                {node.name}\\\\\\\\n              </label>\\\\\\\\n            </div>\\\\\\\\n            {expandedItems[node.id] &&\\\\\\\\n              node.children.length > 0 &&\\\\\\\\n              renderTree(node.children)}\\\\\\\\n          </li>\\\\\\\\n        ))}\\\\\\\\n      </ul>\\\\\\\\n    )\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div style={{ border: 'solid grey 1px', width: '100%' }}>\\\\\\\\n      <input\\\\\\\\n        placeholder='Search...'\\\\\\\\n        value={searchQuery}\\\\\\\\n        onChange={handleSearchChange}\\\\\\\\n        style={{ width: '100%', padding: '10px' }}\\\\\\\\n      />\\\\\\\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '0px' }}>\\\\\\\\n        {renderTree(filteredData)}\\\\\\\\n      </ul>\\\\\\\\n    </div>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default CheckboxTree\\\\\\\\n\\\\\\\",\\\\n  '/utils.js':\\\\n    'const formatData = (data) => {\\\\\\\\n  const map = {}\\\\\\\\n  const result = []\\\\\\\\n\\\\\\\\n  // Create a map of items by their ID for quick access\\\\\\\\n  data.forEach((item) => {\\\\\\\\n    item.children = []\\\\\\\\n    map[item.id] = item\\\\\\\\n  })\\\\\\\\n\\\\\\\\n  // Iterate through the items to build the tree\\\\\\\\n  data.forEach((item) => {\\\\\\\\n    if (item.parentId !== null) {\\\\\\\\n      // If the item has a parent, push it into its parent\\\\\\\\'s \\\\\\\"children\\\\\\\" array\\\\\\\\n      map[item.parentId].children.push(item)\\\\\\\\n    } else {\\\\\\\\n      // If the item has no parent, it\\\\\\\\'s a top-level item, so add it to the result\\\\\\\\n      result.push(item)\\\\\\\\n    }\\\\\\\\n  })\\\\\\\\n  return result\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Recursive function to filter items based on search query, including children\\\\\\\\nconst filterItems = (nodes, query) => {\\\\\\\\n  return nodes.filter((node) => {\\\\\\\\n    const isMatch = node.name.toLowerCase().includes(query.toLowerCase())\\\\\\\\n    if (isMatch) {\\\\\\\\n      return true\\\\\\\\n    }\\\\\\\\n    if (node.children.length > 0) {\\\\\\\\n      return filterItems(node.children, query).length > 0\\\\\\\\n    }\\\\\\\\n    return false\\\\\\\\n  })\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst findParent = (nodes, itemId) => {\\\\\\\\n  for (const node of nodes) {\\\\\\\\n    if (node.id === itemId) {\\\\\\\\n      return null // Root node reached\\\\\\\\n    }\\\\\\\\n    if (node.children.length > 0) {\\\\\\\\n      if (node.children.some((child) => child.id === itemId)) {\\\\\\\\n        return node\\\\\\\\n      } else {\\\\\\\\n        const parent = findParent(node.children, itemId)\\\\\\\\n        if (parent) {\\\\\\\\n          return parent\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return null\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport { filterItems, findParent, formatData }\\\\\\\\n',\\\\n}\\\\n\\\",\\n  },\\n  '/App.js': {\\n    code: \\\"import './styles.css'\\\\nimport data from './data'\\\\nimport { useState } from 'react'\\\\nimport { formatData } from './utils'\\\\nimport CheckedTree from './CheckedTree'\\\\n\\\\nconst Main = () => {\\\\n  const [items] = useState(formatData(data))\\\\n  const [formData, setFormData] = useState({ checkedTree: [] })\\\\n\\\\n  const handleSubmit = () => {\\\\n    console.log(formData)\\\\n  }\\\\n\\\\n  return (\\\\n    <div className='container'>\\\\n      <h1>Mock Form</h1>\\\\n      <input placeholder='Mock Input' className='common' />\\\\n      <input placeholder='Mock Input' className='common' />\\\\n      <CheckedTree\\\\n        data={items}\\\\n        onChange={(checkedItems) => {\\\\n          setFormData((prevFormData) => ({\\\\n            ...prevFormData,\\\\n            checkedTree: checkedItems,\\\\n          }))\\\\n        }}\\\\n      />\\\\n      <button onClick={handleSubmit} className='common'>\\\\n        Submit\\\\n      </button>\\\\n    </div>\\\\n  )\\\\n}\\\\n\\\\nexport default Main\\\\n\\\",\\n  },\\n  '/data.js': {\\n    code: \\\"const response = [\\\\n  { id: 4, parentId: 3, name: 'Days' },\\\\n  { id: 1, parentId: null, name: 'Years' },\\\\n  { id: 2, parentId: 1, name: 'Months' },\\\\n  { id: 5, parentId: null, name: 'Stars' },\\\\n  { id: 3, parentId: 2, name: 'Weeks' },\\\\n  { id: 6, parentId: 5, name: 'Sun' },\\\\n  { id: 7, parentId: 5, name: 'Proxima Centauri' },\\\\n  { id: 8, parentId: null, name: 'Dogs' },\\\\n]\\\\n\\\\nexport default response\\\\n\\\",\\n  },\\n  '/styles.css': {\\n    code: '* {\\\\n  -webkit-box-sizing: border-box;\\\\n  -moz-box-sizing: border-box;\\\\n  box-sizing: border-box;\\\\n}\\\\n\\\\n.container {\\\\n  margin: 30px;\\\\n  width: 500px;\\\\n  color: black;\\\\n  display: flex;\\\\n  flex-direction: column;\\\\n  gap: 10px;\\\\n}\\\\n\\\\n.common {\\\\n  width: 100%;\\\\n  padding: 10px;\\\\n}\\\\n',\\n  },\\n  '/utils.js': {\\n    code: 'const formatData = (data) => {\\\\n  const map = {}\\\\n  const result = []\\\\n\\\\n  // Create a map of items by their ID for quick access\\\\n  data.forEach((item) => {\\\\n    item.children = []\\\\n    map[item.id] = item\\\\n  })\\\\n\\\\n  // Iterate through the items to build the tree\\\\n  data.forEach((item) => {\\\\n    if (item.parentId !== null) {\\\\n      // If the item has a parent, push it into its parent\\\\'s \\\"children\\\" array\\\\n      map[item.parentId].children.push(item)\\\\n    } else {\\\\n      // If the item has no parent, it\\\\'s a top-level item, so add it to the result\\\\n      result.push(item)\\\\n    }\\\\n  })\\\\n  return result\\\\n}\\\\n\\\\n// Recursive function to filter items based on search query, including children\\\\nconst filterItems = (nodes, query) => {\\\\n  return nodes.filter((node) => {\\\\n    const isMatch = node.name.toLowerCase().includes(query.toLowerCase())\\\\n    if (isMatch) {\\\\n      return true\\\\n    }\\\\n    if (node.children.length > 0) {\\\\n      return filterItems(node.children, query).length > 0\\\\n    }\\\\n    return false\\\\n  })\\\\n}\\\\n\\\\nconst findParent = (nodes, itemId) => {\\\\n  for (const node of nodes) {\\\\n    if (node.id === itemId) {\\\\n      return null // Root node reached\\\\n    }\\\\n    if (node.children.length > 0) {\\\\n      if (node.children.some((child) => child.id === itemId)) {\\\\n        return node\\\\n      } else {\\\\n        const parent = findParent(node.children, itemId)\\\\n        if (parent) {\\\\n          return parent\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n  return null\\\\n}\\\\n\\\\nexport { filterItems, findParent, formatData }\\\\n',\\n  },\\n  '/CheckedTree.js': {\\n    code: \\\"/* eslint-disable react/prop-types */\\\\nimport { useState } from 'react'\\\\nimport { filterItems, findParent } from './utils'\\\\n\\\\nconst CheckboxTree = ({ data, onChange }) => {\\\\n  const [searchQuery, setSearchQuery] = useState('')\\\\n  const [checkedItems, setCheckedItems] = useState({})\\\\n  const [expandedItems, setExpandedItems] = useState({})\\\\n\\\\n  const handleCheckboxChange = (itemId) => {\\\\n    const updatedCheckedItems = { ...checkedItems }\\\\n    updatedCheckedItems[itemId] = !updatedCheckedItems[itemId]\\\\n\\\\n    if (updatedCheckedItems[itemId]) {\\\\n      // If checking a child, check all parents\\\\n      checkAllParents(data, itemId, updatedCheckedItems)\\\\n    } else {\\\\n      // If unchecking a parent, uncheck all children\\\\n      uncheckAllChildren(data, itemId, updatedCheckedItems)\\\\n    }\\\\n\\\\n    // update parent onChange\\\\n    const checkedIds = Object.keys(updatedCheckedItems).filter(\\\\n      (id) => updatedCheckedItems[id]\\\\n    )\\\\n    onChange(checkedIds)\\\\n    setCheckedItems(updatedCheckedItems)\\\\n  }\\\\n\\\\n  const checkAllParents = (nodes, childId, updatedCheckedItems) => {\\\\n    for (const node of nodes) {\\\\n      if (node.id === childId) {\\\\n        // Child found, check all its parents\\\\n        checkParents(node, updatedCheckedItems)\\\\n        return\\\\n      }\\\\n      if (node.children.length > 0) {\\\\n        checkAllParents(node.children, childId, updatedCheckedItems)\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  const checkParents = (node, updatedCheckedItems) => {\\\\n    updatedCheckedItems[node.id] = true\\\\n    const parent = findParent(data, node.id)\\\\n    if (parent) {\\\\n      checkParents(parent, updatedCheckedItems)\\\\n    }\\\\n  }\\\\n\\\\n  const uncheckAllChildren = (nodes, parentId, updatedCheckedItems) => {\\\\n    for (const node of nodes) {\\\\n      if (node.id === parentId) {\\\\n        // Parent found, uncheck all its children\\\\n        uncheckChildren(node, updatedCheckedItems)\\\\n        return\\\\n      }\\\\n      if (node.children.length > 0) {\\\\n        uncheckAllChildren(node.children, parentId, updatedCheckedItems)\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  const uncheckChildren = (node, updatedCheckedItems) => {\\\\n    updatedCheckedItems[node.id] = false\\\\n    for (const child of node.children) {\\\\n      uncheckChildren(child, updatedCheckedItems)\\\\n    }\\\\n  }\\\\n\\\\n  const handleExpandToggle = (itemId) => {\\\\n    setExpandedItems((prevState) => ({\\\\n      ...prevState,\\\\n      [itemId]: !prevState[itemId],\\\\n    }))\\\\n  }\\\\n\\\\n  const handleSearchChange = (event) => {\\\\n    setSearchQuery(event.target.value)\\\\n  }\\\\n\\\\n  // Filter items based on search query\\\\n  const filteredData = filterItems(data, searchQuery)\\\\n\\\\n  const renderTree = (nodes) => {\\\\n    return (\\\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '20px' }}>\\\\n        {nodes.map((node) => (\\\\n          <li key={node.id}>\\\\n            <div>\\\\n              {node.children.length > 0 ? (\\\\n                <span\\\\n                  onClick={() => handleExpandToggle(node.id)}\\\\n                  style={{ cursor: 'pointer', marginRight: '5px' }}\\\\n                >\\\\n                  {expandedItems[node.id] ? `v` : '>'}\\\\n                </span>\\\\n              ) : (\\\\n                <span>&nbsp;&nbsp;&nbsp;</span>\\\\n              )}\\\\n              <label>\\\\n                <input\\\\n                  type='checkbox'\\\\n                  checked={checkedItems[node.id] || false}\\\\n                  onChange={() => handleCheckboxChange(node.id)}\\\\n                />\\\\n                {node.name}\\\\n              </label>\\\\n            </div>\\\\n            {expandedItems[node.id] &&\\\\n              node.children.length > 0 &&\\\\n              renderTree(node.children)}\\\\n          </li>\\\\n        ))}\\\\n      </ul>\\\\n    )\\\\n  }\\\\n\\\\n  return (\\\\n    <div style={{ border: 'solid grey 1px', width: '100%' }}>\\\\n      <input\\\\n        placeholder='Search...'\\\\n        value={searchQuery}\\\\n        onChange={handleSearchChange}\\\\n        style={{ width: '100%', padding: '10px' }}\\\\n      />\\\\n      <ul style={{ listStyleType: 'none', paddingInlineStart: '0px' }}>\\\\n        {renderTree(filteredData)}\\\\n      </ul>\\\\n    </div>\\\\n  )\\\\n}\\\\n\\\\nexport default CheckboxTree\\\\n\\\",\\n  },\\n}\\n\",\n  },\n}\n"},"/utils.js":{"code":"const formatData = (data) => {\n  const map = {}\n  const result = []\n\n  // Create a map of items by their ID for quick access\n  data.forEach((item) => {\n    item.children = []\n    map[item.id] = item\n  })\n\n  // Iterate through the items to build the tree\n  data.forEach((item) => {\n    if (item.parentId !== null) {\n      // If the item has a parent, push it into its parent's \"children\" array\n      map[item.parentId].children.push(item)\n    } else {\n      // If the item has no parent, it's a top-level item, so add it to the result\n      result.push(item)\n    }\n  })\n  return result\n}\n\n// Recursive function to filter items based on search query, including children\nconst filterItems = (nodes, query) => {\n  return nodes.filter((node) => {\n    const isMatch = node.name.toLowerCase().includes(query.toLowerCase())\n    if (isMatch) {\n      return true\n    }\n    if (node.children.length > 0) {\n      return filterItems(node.children, query).length > 0\n    }\n    return false\n  })\n}\n\nexport { filterItems, formatData }\n"},"/App.js":{"code":"import './styles.css'\nimport data from './data'\nimport { useState } from 'react'\nimport { formatData } from './utils'\nimport CheckedTree from './CheckedTree'\n\nconst Main = () => {\n  const items = formatData(data)\n  const [formData, setFormData] = useState({ checkedTree: [] })\n\n  const handleSubmit = () => {\n    console.log(formData)\n  }\n\n  return (\n    <div className='container'>\n      <h1>Mock Form</h1>\n      <input placeholder='Mock Input' className='common' />\n      <input placeholder='Mock Input' className='common' />\n      <CheckedTree\n        data={items}\n        onChange={(checkedItems) => {\n          setFormData((prevFormData) => ({\n            ...prevFormData,\n            checkedTree: checkedItems,\n          }))\n        }}\n      />\n      <button onClick={handleSubmit} className='common'>\n        Submit\n      </button>\n    </div>\n  )\n}\n\nexport default Main\n"},"/styles.css":{"code":"* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.container {\n  margin: 30px;\n  width: 500px;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.common {\n  width: 100%;\n  padding: 10px;\n}\n"},"/data.js":{"code":"const response = [\n  { id: 4, parentId: 3, name: 'Days' },\n  { id: 1, parentId: null, name: 'Years' },\n  { id: 2, parentId: 1, name: 'Months' },\n  { id: 5, parentId: null, name: 'Stars' },\n  { id: 3, parentId: 2, name: 'Weeks' },\n  { id: 6, parentId: 5, name: 'Sun' },\n  { id: 7, parentId: 5, name: 'Proxima Centauri' },\n  { id: 8, parentId: null, name: 'Dogs' },\n]\n\nexport default response\n"}},"template":{"/styles.css":{"code":"* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.container {\n  margin: 30px;\n  width: 500px;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.common {\n  width: 100%;\n  padding: 10px;\n}\n"},"/App.js":{"code":"import './styles.css'\nimport data from './data'\nimport { useState } from 'react'\n// import CheckedTree from './CheckedTree'\n\nconst Main = () => {\n  const [formData, setFormData] = useState({ checkedTree: [] })\n\n  const handleSubmit = () => {\n    console.log(formData)\n  }\n\n  return (\n    <div className='container'>\n      <h1>Mock Form</h1>\n      <input placeholder='Mock Input' className='common' />\n      <input placeholder='Mock Input' className='common' />\n      {/* <CheckedTree /> */}\n      <button onClick={handleSubmit} className='common'>\n        Submit\n      </button>\n    </div>\n  )\n}\n\nexport default Main\n"},"/index.js":{"code":"import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"},"/public/index.html":{"code":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>"},"/package.json":{"code":"{\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-scripts\": \"^5.0.0\",\n    \"jest-extended\": \"^3.0.2\",\n    \"react-router-dom\": \"^6.16.0\"\n  },\n  \"main\": \"/index.js\",\n  \"devDependencies\": {}\n}"},"/data.js":{"code":"const response = [\n  { id: 4, parentId: 3, name: 'Days' },\n  { id: 1, parentId: null, name: 'Years' },\n  { id: 2, parentId: 1, name: 'Months' },\n  { id: 5, parentId: null, name: 'Stars' },\n  { id: 3, parentId: 2, name: 'Weeks' },\n  { id: 6, parentId: 5, name: 'Sun' },\n  { id: 7, parentId: 5, name: 'Proxima Centauri' },\n  { id: 8, parentId: null, name: 'Dogs' },\n]\n\nexport default response\n"}},"type":"react","path":"/workouts/react/pure/checkedTree"}