/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns server status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Server is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room/{roomId}/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get players in a room
         * @description Returns all players currently in the specified room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The room identifier */
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["PlayersResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room/{roomId}/battle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get battle status for a room
         * @description Returns the current battle information for the specified room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The room identifier */
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["BattleStatusResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userId}/battles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user battle history
         * @description Returns the battle history for a specific user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of battles to return */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description The user identifier */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User battle history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            battles?: components["schemas"]["Battle"][];
                        };
                    };
                };
                500: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user battle statistics
         * @description Returns comprehensive battle statistics for a user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The user identifier */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["UserStatsResponse"];
                500: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of multiple rooms
         * @description Returns status information for multiple rooms at once
         */
        get: {
            parameters: {
                query: {
                    /** @description Comma-separated list of room IDs */
                    roomIds: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Room statuses */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rooms?: {
                                [key: string]: components["schemas"]["RoomStatus"];
                            };
                        };
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Battle: {
            id?: string;
            room_id?: string;
            /** @enum {string} */
            status?: "waiting" | "active" | "completed";
            admin_user_id?: string;
            participants?: components["schemas"]["BattleParticipant"][];
            duration_minutes?: number;
            /** Format: date-time */
            started_at?: string | null;
            /** Format: date-time */
            completed_at?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            scheduled_start_time?: string | null;
            /** Format: date-time */
            auto_end_time?: string | null;
        };
        BattleParticipant: {
            userId?: string;
            /** Format: date-time */
            joinedAt?: string;
            /** @default 0 */
            testsPassed: number;
            /** @default 0 */
            totalTests: number;
        };
        Player: {
            userId?: string;
            testsPassed?: number;
            totalTests?: number;
            /** Format: date-time */
            joinedAt?: string;
            isConnected?: boolean;
        };
        RoomStatus: {
            status?: string;
            canJoin?: boolean;
            isActive?: boolean;
            isWaiting?: boolean;
            isCompleted?: boolean;
            connectedPlayers?: number;
            participantCount?: number;
            /** Format: date-time */
            startedAt?: string | null;
        };
        UserStats: {
            total_battles?: number;
            wins?: number;
            /** Format: float */
            win_rate?: number;
            /** Format: float */
            avg_tests_passed?: number;
            total_tests_passed?: number;
            best_placement?: number | null;
            recent_battles?: number;
        };
        Error: {
            error?: string;
        };
    };
    responses: {
        /** @description List of players in the room */
        PlayersResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    players?: components["schemas"]["Player"][];
                };
            };
        };
        /** @description Battle status information */
        BattleStatusResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    battle?: components["schemas"]["Battle"];
                    message?: string;
                    canJoin?: boolean;
                    status?: string;
                };
            };
        };
        /** @description User battle statistics */
        UserStatsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    stats?: components["schemas"]["UserStats"];
                };
            };
        };
        /** @description Error response */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
