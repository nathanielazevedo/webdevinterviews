/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns server status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Server is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room/{roomId}/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all players in a room
         * @description Retrieves all players currently in the specified room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique room identifier */
                    roomId: components["parameters"]["RoomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of players in the room */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PlayersResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userId}/battles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user battle history
         * @description Retrieves battle history for a specific user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of battles to return */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Unique user identifier */
                    userId: components["parameters"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User battle history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BattleHistoryResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user statistics
         * @description Retrieves battle statistics for a specific user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique user identifier */
                    userId: components["parameters"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User battle statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserStatsResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/room/{roomId}/battle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get battle status for room
         * @description Retrieves current battle status and information for a specific room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique room identifier */
                    roomId: components["parameters"]["RoomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Battle status information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BattleStatusResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of multiple rooms
         * @description Retrieves status information for multiple rooms at once
         */
        get: {
            parameters: {
                query: {
                    /** @description Comma-separated list of room IDs */
                    roomIds: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status information for requested rooms */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MultiRoomStatusResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example ok */
            status: string;
        };
        PlayersResponse: {
            players: components["schemas"]["Player"][];
        };
        BattleHistoryResponse: {
            battles: components["schemas"]["Battle"][];
        };
        UserStatsResponse: {
            stats: components["schemas"]["UserStats"];
        };
        BattleStatusResponse: {
            battle: components["schemas"]["BattleInfo"] | null;
            /** @example No battle found for this room */
            message?: string;
            canJoin: boolean;
            /** @enum {string} */
            status: "no-battle" | "waiting" | "active" | "completed";
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleStatusResponse";
        };
        /** @example {
         *       "battle_1": {
         *         "status": "active",
         *         "canJoin": true,
         *         "isActive": true,
         *         "connectedPlayers": 3,
         *         "participantCount": 3
         *       },
         *       "battle_2": {
         *         "status": "no-battle",
         *         "canJoin": true,
         *         "connectedPlayers": 0
         *       }
         *     } */
        MultiRoomStatusResponse: {
            [key: string]: components["schemas"]["RoomStatus"];
        };
        Player: {
            /**
             * Format: uuid
             * @example c9c22420-5e80-490f-8abf-3396c5949adf
             */
            userId: string;
            /** @example 3 */
            testsPassed: number;
            /** @example 5 */
            totalTests: number;
            /**
             * Format: date-time
             * @example 2025-10-08T23:40:13.838Z
             */
            joinedAt: string;
            /** @example true */
            isConnected: boolean;
        };
        Battle: {
            /** Format: uuid */
            id: string;
            /** @example battle_1 */
            room_id: string;
            /** @enum {string} */
            status: "waiting" | "active" | "completed";
            /** Format: uuid */
            admin_user_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            started_at?: string | null;
            /** Format: date-time */
            completed_at?: string | null;
            /**
             * Format: date-time
             * @description When the battle is scheduled to start automatically
             */
            scheduled_start_time?: string | null;
            /**
             * @description Battle duration in minutes
             * @default 60
             */
            duration_minutes: number;
            /**
             * Format: date-time
             * @description Calculated time when battle should automatically end
             */
            auto_end_time?: string | null;
            /**
             * @description How the battle ended
             * @enum {string|null}
             */
            ended_by?: "admin" | "timeout" | "manual" | null;
            participants?: components["schemas"]["BattleParticipant"][];
        };
        BattleParticipant: {
            /** Format: uuid */
            user_id: string;
            tests_passed: number;
            total_tests: number;
            /** Format: date-time */
            joined_at: string;
            final_placement?: number | null;
        };
        BattleInfo: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            status: "waiting" | "active" | "completed";
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: uuid */
            adminUserId: string;
            participantCount: number;
            connectedPlayers: number;
            canJoin: boolean;
            isActive: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
        };
        RoomStatus: {
            /** @enum {string} */
            status: "no-battle" | "waiting" | "active" | "completed" | "error";
            canJoin: boolean;
            isActive?: boolean;
            isWaiting?: boolean;
            isCompleted?: boolean;
            connectedPlayers: number;
            participantCount?: number;
            /** Format: date-time */
            startedAt?: string | null;
        };
        UserStats: {
            totalBattles: number;
            battlesWon: number;
            battlesCompleted: number;
            averageTestsPassed: number;
            winRate: number;
        };
        Question: {
            /** @example 1 */
            id: number;
            /** @example Two Sum */
            title: string;
            /** @example two-sum */
            slug: string;
            /**
             * @example Easy
             * @enum {string}
             */
            difficulty: "Easy" | "Medium" | "Hard";
            /** @description The full problem description */
            problem_statement: string;
            /** @description The initial function signature for the problem */
            function_signature: string;
            /** @description Test cases for the problem */
            test_cases: {
                input?: Record<string, never>;
                expected?: unknown;
            }[];
            /** @description Example input/output pairs with explanations */
            examples?: {
                input?: string;
                output?: string;
                explanation?: string;
            }[] | null;
            /** @description Problem constraints */
            constraints?: string | null;
            /** @description Hints for solving the problem */
            hints?: string[] | null;
            /** @description Topic tags for the problem */
            tags?: string[] | null;
            /**
             * @description Original LeetCode problem number
             * @example 1
             */
            leetcode_number?: number | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        QuestionSummary: {
            /** @example 1 */
            id: number;
            /** @example Two Sum */
            title: string;
            /**
             * @example Easy
             * @enum {string}
             */
            difficulty: "Easy" | "Medium" | "Hard";
            /** @example 1 */
            leetcode_number?: number | null;
            /** @example [
             *       "Array",
             *       "Hash Table"
             *     ] */
            tags?: string[] | null;
        };
        WebSocketMessage: components["schemas"]["JoinRoomMessage"] | components["schemas"]["StartBattleMessage"] | components["schemas"]["TestResultsMessage"] | components["schemas"]["GetPlayersMessage"] | components["schemas"]["WatchRoomsMessage"] | components["schemas"]["UnwatchRoomsMessage"] | components["schemas"]["CompleteBattleMessage"] | components["schemas"]["CreateBattleMessage"] | components["schemas"]["UpdateBattleTimingMessage"] | components["schemas"]["GetBattleInfoMessage"] | components["schemas"]["GetCurrentQuestionMessage"] | components["schemas"]["GetQuestionPoolMessage"];
        JoinRoomMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "JoinRoomMessage";
            /** @example battle_1 */
            roomId: string;
            /** Format: uuid */
            userId: string;
        };
        StartBattleMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "StartBattleMessage";
        };
        TestResultsMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TestResultsMessage";
            passed: number;
            total: number;
        };
        GetPlayersMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "GetPlayersMessage";
        };
        WatchRoomsMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "WatchRoomsMessage";
            /** @example [
             *       "battle_1",
             *       "battle_2"
             *     ] */
            roomIds?: string[];
        };
        UnwatchRoomsMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "UnwatchRoomsMessage";
        };
        CompleteBattleMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CompleteBattleMessage";
            /** @description Completion time in milliseconds */
            completionTime?: number | null;
        };
        CreateBattleMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CreateBattleMessage";
            /** @description Room ID for the battle */
            roomId: string;
            options?: {
                /**
                 * Format: date-time
                 * @description ISO timestamp for scheduled battle start
                 */
                scheduled_start_time?: string;
                /** @description Battle duration in minutes */
                duration_minutes?: number;
            };
        };
        UpdateBattleTimingMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "UpdateBattleTimingMessage";
            /**
             * Format: uuid
             * @description ID of the battle to update
             */
            battleId: string;
            options: {
                /**
                 * Format: date-time
                 * @description New scheduled start time
                 */
                scheduled_start_time?: string;
                /** @description New duration in minutes */
                duration_minutes?: number;
            };
        };
        GetBattleInfoMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "GetBattleInfoMessage";
            /**
             * Format: uuid
             * @description ID of the battle to get info for
             */
            battleId: string;
        };
        GetCurrentQuestionMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "GetCurrentQuestionMessage";
        };
        GetQuestionPoolMessage: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "GetQuestionPoolMessage";
        };
        WebSocketResponse: components["schemas"]["BattleStatusResponse"] | components["schemas"]["BattleStartedResponse"] | components["schemas"]["TestResultsUpdateResponse"] | components["schemas"]["PlayersListResponse"] | components["schemas"]["RoomStatusesResponse"] | components["schemas"]["BattleCompletedResponse"] | components["schemas"]["BattleCreatedResponse"] | components["schemas"]["BattleTimingUpdatedResponse"] | components["schemas"]["BattleInfoResponse"] | components["schemas"]["CurrentQuestionResponse"] | components["schemas"]["QuestionPoolResponse"] | components["schemas"]["ErrorResponse"];
        BattleStatusWsResponse: {
            /** @enum {string} */
            type: "battle-status";
            /** @enum {string} */
            status: "waiting" | "active" | "completed";
            isAdmin: boolean;
            /** Format: uuid */
            battleId: string;
        };
        BattleStartedResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleStartedResponse";
            /** Format: uuid */
            battleId: string;
            /** Format: date-time */
            startedAt: string;
        };
        TestResultsUpdateResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TestResultsUpdateResponse";
            /** Format: uuid */
            userId: string;
            passed: number;
            total: number;
        };
        PlayersListResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "PlayersListResponse";
            players: components["schemas"]["Player"][];
        };
        RoomStatusesResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "RoomStatusesResponse";
            rooms: {
                [key: string]: components["schemas"]["RoomStatus"];
            };
        };
        BattleCompletedResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleCompletedResponse";
            /** Format: uuid */
            battleId: string;
            results: {
                /** Format: uuid */
                userId: string;
                testsPassed: number;
                totalTests: number;
                completionTime?: number | null;
                placement: number;
            }[];
        };
        BattleCreatedResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleCreatedResponse";
            battle: components["schemas"]["Battle"];
        };
        BattleTimingUpdatedResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleTimingUpdatedResponse";
            /** Format: uuid */
            battleId: string;
            timing: {
                /** Format: date-time */
                scheduled_start_time?: string | null;
                duration_minutes?: number | null;
                /** Format: date-time */
                auto_end_time?: string | null;
            };
        };
        BattleInfoResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "BattleInfoResponse";
            battle: components["schemas"]["Battle"];
        };
        CurrentQuestionResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CurrentQuestionResponse";
            question: components["schemas"]["Question"] & unknown;
        };
        QuestionPoolResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "QuestionPoolResponse";
            questions: components["schemas"]["QuestionSummary"][];
        };
        ErrorResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ErrorResponse";
            message: string;
        };
    };
    responses: {
        /** @description Bad request - invalid parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example roomIds query parameter is required */
                    error: string;
                };
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Failed to fetch data */
                    error: string;
                };
            };
        };
    };
    parameters: {
        /** @description Unique room identifier */
        RoomId: string;
        /** @description Unique user identifier */
        UserId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
